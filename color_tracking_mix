import cv2
import numpy as np

def adjust_blue_tone(frame, blue_decrease=23, blue_boost=30):
    b, g, r = cv2.split(frame)
    b = cv2.subtract(b, np.full(b.shape, blue_decrease, dtype=np.uint8))
    b = cv2.add(b, np.full(b.shape, blue_boost, dtype=np.uint8))
    return cv2.merge((b, g, r))

def add_uv_effect(frame, purple_boost=55, brightness_increase=37):
    hsv_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
    h, s, v = cv2.split(hsv_frame)
    s = cv2.add(s, np.full(s.shape, purple_boost, dtype=np.uint8))
    v = cv2.add(v, np.full(v.shape, brightness_increase, dtype=np.uint8))
    modified_hsv = cv2.merge((h, s, v))
    return cv2.cvtColor(modified_hsv, cv2.COLOR_HSV2BGR)

def follow_color(frame):
    GREEN_LOW = np.array([40, 100, 100], np.uint8)
    GREEN_HIGH = np.array([100, 255, 255], np.uint8)
    frame_hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
    mask_green = cv2.inRange(frame_hsv, GREEN_LOW, GREEN_HIGH)
    contours, _ = cv2.findContours(mask_green, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    for contour in contours:
        area = cv2.contourArea(contour)
        if area < 500:
            continue

        M = cv2.moments(contour)
        if M["m00"] != 0:
            x = int(M["m10"] / M["m00"])
            y = int(M["m01"] / M["m00"])
            cv2.circle(frame, (x, y), 7, (0, 255, 0), -1)
            cv2.putText(frame, f"({x}, {y})", (x + 10, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 1)

        x, y, w, h = cv2.boundingRect(contour)
        cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)

        X = 280
        Y = 465
        if x < 271:
            print("Rotar derecha")
        elif x > 279:
            print("Rotar izquierda")
        elif 271 <= x <= 279:
            print("Adelante")
            if 460 <= y <= Y:
                print("Llego")
    return frame

def second_cam():
    video_capture = cv2.VideoCapture(1)
    while True:
        ret, frame = video_capture.read()
        if not ret:
            print("Error al capturar el fotograma. Saliendo...")
            break
        uv_effect_frame = add_uv_effect(frame)
        final_frame = follow_color(uv_effect_frame)
        cv2.imshow('Segunda Cámara con Seguimiento', final_frame)
        if 460 <= y <= 465 and 271 <= x <= 279:
            print("Llego")
        if cv2.waitKey(1) & 0xFF == ord("q"):
            break
    video_capture.release()
    cv2.destroyAllWindows()

def apply_all_effects_to_camera():
    try:
        cap = cv2.VideoCapture(0)
        if not cap.isOpened():
            raise ValueError("No se pudo acceder a la cámara.")
        print("Presiona 'q' para salir.")
        
        while True:
            ret, frame = cap.read()
            if not ret:
                print("Error al capturar el fotograma. Saliendo...")
                break
            adjusted_frame = adjust_blue_tone(frame)
            uv_effect_frame = add_uv_effect(adjusted_frame)
            final_frame = follow_color(uv_effect_frame)
            cv2.imshow('Efectos Combinados con Seguimiento de Color', final_frame)
            if cv2.waitKey(1) & 0xFF == ord('q'):
                break
        cap.release()
        cv2.destroyAllWindows()
    except Exception as e:
        print(f"Error al procesar la cámara: {e}")

apply_all_effects_to_camera()
second_cam()

